// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Naomi.promotion_service.Models.Contexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Naomi.promotion_service.Migrations
{
    [DbContext(typeof(DataDbContext))]
    [Migration("20231118140648_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(11);

                    b.Property<decimal?>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance")
                        .HasColumnOrder(5);

                    b.Property<decimal?>("BalanceBook")
                        .HasColumnType("numeric")
                        .HasColumnName("balance_book")
                        .HasColumnOrder(6);

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("company_code")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(7);

                    b.Property<string>("PromoCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("promo_code")
                        .HasColumnOrder(2);

                    b.Property<int?>("Qty")
                        .HasColumnType("integer")
                        .HasColumnName("qty")
                        .HasColumnOrder(3);

                    b.Property<int?>("QtyBook")
                        .HasColumnType("integer")
                        .HasColumnName("qty_book")
                        .HasColumnOrder(4);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(10);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(9);

                    b.HasKey("Id");

                    b.ToTable("promo_master");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoMasterClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(8);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(4);

                    b.Property<int>("LineNum")
                        .HasColumnType("integer")
                        .HasColumnName("line_num")
                        .HasColumnOrder(3);

                    b.Property<string>("PromotionClassKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("promotion_class_key")
                        .HasColumnOrder(1);

                    b.Property<string>("PromotionClassName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("promotion_class_name")
                        .HasColumnOrder(2);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.ToTable("promo_master_class");

                    b.HasData(
                        new
                        {
                            Id = new Guid("302be9cd-5e08-454d-b8e5-582d336750d7"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3634),
                            LineNum = 1,
                            PromotionClassKey = "ITEM",
                            PromotionClassName = "ITEM",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3646)
                        },
                        new
                        {
                            Id = new Guid("8713bd36-48d6-43dd-94b9-407c3aff1528"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3651),
                            LineNum = 2,
                            PromotionClassKey = "CART",
                            PromotionClassName = "CART",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3652)
                        },
                        new
                        {
                            Id = new Guid("dbf358cb-f43b-4d69-9176-8ee63ac8953f"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3654),
                            LineNum = 3,
                            PromotionClassKey = "MOP",
                            PromotionClassName = "MOP",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3654)
                        },
                        new
                        {
                            Id = new Guid("c386c5f1-d3d2-4e7f-ad6a-34b4f185325c"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3656),
                            LineNum = 4,
                            PromotionClassKey = "Entertain",
                            PromotionClassName = "Entertain",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3657)
                        });
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoMasterMop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(9);

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("company_code")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(5);

                    b.Property<string>("MopCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("mop_code")
                        .HasColumnOrder(3);

                    b.Property<string>("MopName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("mop_name")
                        .HasColumnOrder(4);

                    b.Property<string>("SiteCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("site_code")
                        .HasColumnOrder(2);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.ToTable("promo_master_mop");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoMasterSite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(8);

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("company_code")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(4);

                    b.Property<string>("SiteCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("site_code")
                        .HasColumnOrder(2);

                    b.Property<string>("SiteName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("site_name")
                        .HasColumnOrder(3);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.ToTable("promo_master_site");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoMasterType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(9);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(5);

                    b.Property<int>("LineNum")
                        .HasColumnType("integer")
                        .HasColumnName("line_num")
                        .HasColumnOrder(4);

                    b.Property<string>("PromotionClassId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("promotion_class_id")
                        .HasColumnOrder(1);

                    b.Property<string>("PromotionTypeKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("promotion_type_key")
                        .HasColumnOrder(2);

                    b.Property<string>("PromotionTypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("promotion_type_name")
                        .HasColumnOrder(3);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.ToTable("promo_master_type");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fac8e236-2fb7-4b4a-b644-0680f60fd0a0"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3902),
                            LineNum = 1,
                            PromotionClassId = "302BE9CD-5E08-454D-B8E5-582D336750D7",
                            PromotionTypeKey = "ITEM",
                            PromotionTypeName = "BUY X GET Y ITEM",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3903)
                        },
                        new
                        {
                            Id = new Guid("e0d70f81-6a25-434d-9055-e50554ef585c"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3906),
                            LineNum = 1,
                            PromotionClassId = "302BE9CD-5E08-454D-B8E5-582D336750D7",
                            PromotionTypeKey = "SP",
                            PromotionTypeName = "SPECIAL PRICE ITEM",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3907)
                        },
                        new
                        {
                            Id = new Guid("1f57489b-cca0-4392-ae00-3d145012d375"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3910),
                            LineNum = 2,
                            PromotionClassId = "302BE9CD-5E08-454D-B8E5-582D336750D7",
                            PromotionTypeKey = "AMOUNT",
                            PromotionTypeName = "DISCOUNT AMOUNT ITEM",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3910)
                        },
                        new
                        {
                            Id = new Guid("886470d3-5e0b-41ed-baa7-10cd94511e10"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3913),
                            LineNum = 2,
                            PromotionClassId = "302BE9CD-5E08-454D-B8E5-582D336750D7",
                            PromotionTypeKey = "PERCENT",
                            PromotionTypeName = "DISCOUNT PERCENT ITEM",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3913)
                        },
                        new
                        {
                            Id = new Guid("bd4f0c46-7d03-45fa-b33c-77028218593a"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3915),
                            LineNum = 2,
                            PromotionClassId = "302BE9CD-5E08-454D-B8E5-582D336750D7",
                            PromotionTypeKey = "BUNDLE",
                            PromotionTypeName = "DISCOUNT BUNDLING ITEM",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3916)
                        },
                        new
                        {
                            Id = new Guid("86ed449a-e4bc-4c28-a6e5-3ba18e491e63"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3918),
                            LineNum = 2,
                            PromotionClassId = "8713BD36-48D6-43DD-94B9-407C3AFF1528",
                            PromotionTypeKey = "AMOUNT",
                            PromotionTypeName = "DISCOUNT AMOUNT CART",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3918)
                        },
                        new
                        {
                            Id = new Guid("2524251a-565a-46c0-93d5-deea80c63ff5"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3920),
                            LineNum = 2,
                            PromotionClassId = "8713BD36-48D6-43DD-94B9-407C3AFF1528",
                            PromotionTypeKey = "PERCENT",
                            PromotionTypeName = "DISCOUNT PERCENT CART",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3921)
                        },
                        new
                        {
                            Id = new Guid("3c7ed57d-8235-453f-8f97-ba93b3747b4f"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3923),
                            LineNum = 2,
                            PromotionClassId = "DBF358CB-F43B-4D69-9176-8EE63AC8953F",
                            PromotionTypeKey = "AMOUNT",
                            PromotionTypeName = "DISCOUNT AMOUNT MOP",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3923)
                        },
                        new
                        {
                            Id = new Guid("dda43968-95bd-4d94-8737-fd621d0a5895"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3925),
                            LineNum = 2,
                            PromotionClassId = "DBF358CB-F43B-4D69-9176-8EE63AC8953F",
                            PromotionTypeKey = "PERCENT",
                            PromotionTypeName = "DISCOUNT PERCENT MOP",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3926)
                        },
                        new
                        {
                            Id = new Guid("57ae0d50-1d3b-4a33-8d7c-a4cab863aa30"),
                            ActiveFlag = true,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3929),
                            LineNum = 2,
                            PromotionClassId = "C386C5F1-D3D2-4E7F-AD6A-34B4F185325C",
                            PromotionTypeKey = "PERCENT",
                            PromotionTypeName = "DISCOUNT PERCENT Entertain",
                            UpdatedBy = "System",
                            UpdatedDate = new DateTime(2023, 11, 18, 21, 6, 48, 155, DateTimeKind.Local).AddTicks(3930)
                        });
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoMasterUserEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(7);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(3);

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email")
                        .HasColumnOrder(2);

                    b.Property<string>("Nip")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nip")
                        .HasColumnOrder(1);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("promo_master_user_email");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoMasterZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(9);

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("company_code")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(5);

                    b.Property<string>("PricingZoneCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("pricing_zone_code")
                        .HasColumnOrder(3);

                    b.Property<string>("PricingZoneName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("pricing_zone_name")
                        .HasColumnOrder(4);

                    b.Property<string>("SiteCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("site_code")
                        .HasColumnOrder(2);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.ToTable("promo_master_zone");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoOtp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(10);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code")
                        .HasColumnOrder(3);

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("company_code")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("exp_date")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsUse")
                        .HasColumnType("boolean")
                        .HasColumnName("is_use")
                        .HasColumnOrder(4);

                    b.Property<string>("Nip")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nip")
                        .HasColumnOrder(2);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(9);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(8);

                    b.HasKey("Id");

                    b.ToTable("promo_otp");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(30);

                    b.Property<int>("Cls")
                        .HasColumnType("integer")
                        .HasColumnName("cls")
                        .HasColumnOrder(5);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code")
                        .HasColumnOrder(2);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(27);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(26);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date")
                        .HasColumnOrder(16);

                    b.Property<string>("EntertaimentNip")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("entertaiment_nip")
                        .HasColumnOrder(19);

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("item_type")
                        .HasColumnOrder(7);

                    b.Property<int>("Lvl")
                        .HasColumnType("integer")
                        .HasColumnName("lvl")
                        .HasColumnOrder(6);

                    b.Property<decimal?>("MaxBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("max_balance")
                        .HasColumnOrder(14);

                    b.Property<int?>("MaxMultiple")
                        .HasColumnType("integer")
                        .HasColumnName("max_multiple")
                        .HasColumnOrder(12);

                    b.Property<int?>("MaxUse")
                        .HasColumnType("integer")
                        .HasColumnName("max_use")
                        .HasColumnOrder(13);

                    b.Property<string>("MaxValue")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("max_value")
                        .HasColumnOrder(11);

                    b.Property<bool>("Member")
                        .HasColumnType("boolean")
                        .HasColumnName("member")
                        .HasColumnOrder(23);

                    b.Property<int>("MultipleQty")
                        .HasColumnType("integer")
                        .HasColumnName("multiple_qty")
                        .HasColumnOrder(18);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name")
                        .HasColumnOrder(4);

                    b.Property<bool>("NewMember")
                        .HasColumnType("boolean")
                        .HasColumnName("new_member")
                        .HasColumnOrder(24);

                    b.Property<string>("PromoActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("promo_action_type")
                        .HasColumnOrder(9);

                    b.Property<string>("PromoActionValue")
                        .HasColumnType("text")
                        .HasColumnName("promo_action_value")
                        .HasColumnOrder(10);

                    b.Property<string>("PromoDesc")
                        .HasColumnType("text")
                        .HasColumnName("promo_desc")
                        .HasColumnOrder(20);

                    b.Property<string>("PromoImageLink")
                        .HasColumnType("text")
                        .HasColumnName("promo_image_link")
                        .HasColumnOrder(25);

                    b.Property<bool>("PromoShow")
                        .HasColumnType("boolean")
                        .HasColumnName("promo_show")
                        .HasColumnOrder(22);

                    b.Property<string>("PromoTermCondition")
                        .HasColumnType("text")
                        .HasColumnName("promo_term_condition")
                        .HasColumnOrder(21);

                    b.Property<Guid?>("PromoWorkflowId")
                        .HasColumnType("uuid")
                        .HasColumnName("promo_workflow_id")
                        .HasColumnOrder(1);

                    b.Property<string>("RedeemCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("redeem_code")
                        .HasColumnOrder(3);

                    b.Property<string>("RefCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ref_code")
                        .HasColumnOrder(17);

                    b.Property<string>("ResultType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("result_type")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("max_discount")
                        .HasColumnOrder(15);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(29);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(28);

                    b.HasKey("Id");

                    b.HasIndex("PromoWorkflowId");

                    b.ToTable("promo_rule");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoRuleApps", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(8);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code")
                        .HasColumnOrder(2);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name")
                        .HasColumnOrder(3);

                    b.Property<Guid?>("PromoRuleId")
                        .HasMaxLength(50)
                        .HasColumnType("uuid")
                        .HasColumnName("promo_rule_id")
                        .HasColumnOrder(1);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.HasIndex("PromoRuleId");

                    b.ToTable("promo_rule_apps");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoRuleExpression", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(12);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code")
                        .HasColumnOrder(4);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(9);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(8);

                    b.Property<int>("GroupLine")
                        .HasColumnType("integer")
                        .HasColumnName("group_line")
                        .HasColumnOrder(3);

                    b.Property<int>("LineNum")
                        .HasColumnType("integer")
                        .HasColumnName("line_num")
                        .HasColumnOrder(2);

                    b.Property<string>("LinkExp")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("link_exp")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name")
                        .HasColumnOrder(5);

                    b.Property<string>("ParamsExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("params_expression")
                        .HasColumnOrder(6);

                    b.Property<Guid?>("PromoRuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("promo_rule_id")
                        .HasColumnOrder(1);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(10);

                    b.HasKey("Id");

                    b.HasIndex("PromoRuleId");

                    b.ToTable("promo_rule_expression");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoRuleMembership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(7);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(3);

                    b.Property<string>("NameStatus")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name_status")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("PromoRuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("promo_rule_id")
                        .HasColumnOrder(1);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("PromoRuleId");

                    b.ToTable("promo_rule_membership");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoRuleMop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(11);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(7);

                    b.Property<int>("LineNum")
                        .HasColumnType("integer")
                        .HasColumnName("line_num")
                        .HasColumnOrder(2);

                    b.Property<string>("MopGroupCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("mop_group_code")
                        .HasColumnOrder(5);

                    b.Property<string>("MopGroupName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("mop_group_name")
                        .HasColumnOrder(6);

                    b.Property<string>("MopPromoSelectionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("mop_promo_selection_code")
                        .HasColumnOrder(3);

                    b.Property<string>("MopPromoSelectionName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("mop_promo_selection_name")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("PromoRuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("promo_rule_id")
                        .HasColumnOrder(1);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(10);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(9);

                    b.HasKey("Id");

                    b.HasIndex("PromoRuleId");

                    b.ToTable("promo_rule_mop");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoRuleResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(12);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(9);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(8);

                    b.Property<string>("DscValue")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("dsc_value")
                        .HasColumnOrder(5);

                    b.Property<int>("GroupLine")
                        .HasColumnType("integer")
                        .HasColumnName("group_line")
                        .HasColumnOrder(3);

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("item")
                        .HasColumnOrder(4);

                    b.Property<int>("LineNum")
                        .HasColumnType("integer")
                        .HasColumnName("line_num")
                        .HasColumnOrder(2);

                    b.Property<string>("LinkRsl")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("link_rsl")
                        .HasColumnOrder(7);

                    b.Property<string>("MaxValue")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("max_value")
                        .HasColumnOrder(6);

                    b.Property<Guid?>("PromoRuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("promo_rule_id")
                        .HasColumnOrder(1);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(10);

                    b.HasKey("Id");

                    b.HasIndex("PromoRuleId");

                    b.ToTable("promo_rule_result");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoRuleSite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(8);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code")
                        .HasColumnOrder(2);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name")
                        .HasColumnOrder(3);

                    b.Property<Guid?>("PromoRuleId")
                        .HasMaxLength(50)
                        .HasColumnType("uuid")
                        .HasColumnName("promo_rule_id")
                        .HasColumnOrder(1);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.HasIndex("PromoRuleId");

                    b.ToTable("promo_rule_site");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoRuleVariable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(10);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code")
                        .HasColumnOrder(3);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(7);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(6);

                    b.Property<int>("LineNum")
                        .HasColumnType("integer")
                        .HasColumnName("line_num")
                        .HasColumnOrder(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name")
                        .HasColumnOrder(4);

                    b.Property<string>("ParamsExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("params_expression")
                        .HasColumnOrder(5);

                    b.Property<Guid?>("PromoRuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("promo_rule_id")
                        .HasColumnOrder(1);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(9);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(8);

                    b.HasKey("Id");

                    b.HasIndex("PromoRuleId");

                    b.ToTable("promo_rule_variable");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoTrans", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(9);

                    b.Property<bool>("Commited")
                        .HasColumnType("boolean")
                        .HasColumnName("commited")
                        .HasColumnOrder(4);

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("company_code")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("TransDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("trans_date")
                        .HasColumnOrder(3);

                    b.Property<string>("TransId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("trans_id")
                        .HasColumnOrder(2);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.ToTable("promo_trans");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoTransDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(17);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(14);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(13);

                    b.Property<int>("LineNum")
                        .HasColumnType("integer")
                        .HasColumnName("line_num")
                        .HasColumnOrder(2);

                    b.Property<bool>("Member")
                        .HasColumnType("boolean")
                        .HasColumnName("member")
                        .HasColumnOrder(7);

                    b.Property<string>("MemberStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("member_status")
                        .HasColumnOrder(9);

                    b.Property<bool>("NewMember")
                        .HasColumnType("boolean")
                        .HasColumnName("new_member")
                        .HasColumnOrder(8);

                    b.Property<string>("PromoApps")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("promo_apps")
                        .HasColumnOrder(10);

                    b.Property<string>("PromoCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("promo_code")
                        .HasColumnOrder(3);

                    b.Property<string>("PromoOtp")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("promo_otp")
                        .HasColumnOrder(4);

                    b.Property<decimal?>("PromoTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("promo_total")
                        .HasColumnOrder(12);

                    b.Property<Guid?>("PromoTransId")
                        .HasColumnType("uuid")
                        .HasColumnName("promo_trans_id")
                        .HasColumnOrder(1);

                    b.Property<int?>("QtyPromo")
                        .HasColumnType("integer")
                        .HasColumnName("qty_promo")
                        .HasColumnOrder(11);

                    b.Property<string>("SiteCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("site_code")
                        .HasColumnOrder(6);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(16);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(15);

                    b.Property<string>("ZoneCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("zone_code")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("PromoTransId");

                    b.ToTable("promo_trans_detail");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoWorkflow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(7);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code")
                        .HasColumnOrder(1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("promo_workflow");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoWorkflowExpression", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("active_flag")
                        .HasColumnOrder(9);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code")
                        .HasColumnOrder(2);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasColumnOrder(5);

                    b.Property<string>("Expression")
                        .HasColumnType("text")
                        .HasColumnName("expression")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name")
                        .HasColumnOrder(3);

                    b.Property<Guid?>("PromoWorkflowId")
                        .HasColumnType("uuid")
                        .HasColumnName("promo_workflow_id")
                        .HasColumnOrder(1);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("updated_by")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.HasIndex("PromoWorkflowId");

                    b.ToTable("promo_workflow_expression");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoRule", b =>
                {
                    b.HasOne("Naomi.promotion_service.Models.Entities.PromoWorkflow", null)
                        .WithMany("PromoRule")
                        .HasForeignKey("PromoWorkflowId");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoRuleApps", b =>
                {
                    b.HasOne("Naomi.promotion_service.Models.Entities.PromoRule", null)
                        .WithMany("PromoRuleApps")
                        .HasForeignKey("PromoRuleId");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoRuleExpression", b =>
                {
                    b.HasOne("Naomi.promotion_service.Models.Entities.PromoRule", null)
                        .WithMany("PromoRuleExpression")
                        .HasForeignKey("PromoRuleId");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoRuleMembership", b =>
                {
                    b.HasOne("Naomi.promotion_service.Models.Entities.PromoRule", null)
                        .WithMany("PromoRuleMembership")
                        .HasForeignKey("PromoRuleId");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoRuleMop", b =>
                {
                    b.HasOne("Naomi.promotion_service.Models.Entities.PromoRule", null)
                        .WithMany("PromoRuleMop")
                        .HasForeignKey("PromoRuleId");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoRuleResult", b =>
                {
                    b.HasOne("Naomi.promotion_service.Models.Entities.PromoRule", null)
                        .WithMany("PromoRuleResult")
                        .HasForeignKey("PromoRuleId");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoRuleSite", b =>
                {
                    b.HasOne("Naomi.promotion_service.Models.Entities.PromoRule", null)
                        .WithMany("PromoRuleSite")
                        .HasForeignKey("PromoRuleId");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoRuleVariable", b =>
                {
                    b.HasOne("Naomi.promotion_service.Models.Entities.PromoRule", null)
                        .WithMany("PromoRuleVariable")
                        .HasForeignKey("PromoRuleId");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoTransDetail", b =>
                {
                    b.HasOne("Naomi.promotion_service.Models.Entities.PromoTrans", null)
                        .WithMany("PromoTransDetail")
                        .HasForeignKey("PromoTransId");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoWorkflowExpression", b =>
                {
                    b.HasOne("Naomi.promotion_service.Models.Entities.PromoWorkflow", null)
                        .WithMany("PromoWorkflowExpression")
                        .HasForeignKey("PromoWorkflowId");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoRule", b =>
                {
                    b.Navigation("PromoRuleApps");

                    b.Navigation("PromoRuleExpression");

                    b.Navigation("PromoRuleMembership");

                    b.Navigation("PromoRuleMop");

                    b.Navigation("PromoRuleResult");

                    b.Navigation("PromoRuleSite");

                    b.Navigation("PromoRuleVariable");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoTrans", b =>
                {
                    b.Navigation("PromoTransDetail");
                });

            modelBuilder.Entity("Naomi.promotion_service.Models.Entities.PromoWorkflow", b =>
                {
                    b.Navigation("PromoRule");

                    b.Navigation("PromoWorkflowExpression");
                });
#pragma warning restore 612, 618
        }
    }
}
